"use strict";(self.webpackChunkrenative_docs=self.webpackChunkrenative_docs||[]).push([[6880],{2639:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var i=t(7462),a=t(3366),l=(t(7294),t(3905)),r=["components"],o={id:"advanced-configuration",title:"Advanced Configurations",sidebar_label:"Advanced Configurations"},p=void 0,s={unversionedId:"guides/advanced-configuration",id:"guides/advanced-configuration",title:"Advanced Configurations",description:"Extremely versatile config system allows you to configure most of your project and environment by simple renative.json file changes.",source:"@site/docs/guides/advanced-configuration.md",sourceDirName:"guides",slug:"/guides/advanced-configuration",permalink:"/docs/guides/advanced-configuration",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/guides/advanced-configuration.md",tags:[],version:"current",frontMatter:{id:"advanced-configuration",title:"Advanced Configurations",sidebar_label:"Advanced Configurations"},sidebar:"docsSidebar",previous:{title:"Migrating react-native",permalink:"/docs/overview/migrating_react_native"},next:{title:"Analytics",permalink:"/docs/guides/analytics"}},u=[{value:"Project Configuration",id:"project-configuration",children:[],level:2},{value:"App Configuration",id:"app-configuration",children:[],level:2},{value:"Global Configuration",id:"global-configuration",children:[],level:2},{value:"Workspace Configuration",id:"workspace-configuration",children:[],level:2},{value:"Template Configuration",id:"template-configuration",children:[],level:2},{value:"Build Configuration",id:"build-configuration",children:[],level:2},{value:"Local Configuration",id:"local-configuration",children:[],level:2},{value:"Private Configuration",id:"private-configuration",children:[],level:2},{value:"Runtime Configuration",id:"runtime-configuration",children:[{value:"Injecting Runtime Value",id:"injecting-runtime-value",children:[],level:3}],level:2},{value:"Configuration Merges",id:"configuration-merges",children:[],level:2},{value:"Dynamic Injectors",id:"dynamic-injectors",children:[{value:"configProps",id:"configprops",children:[],level:3},{value:"runtimeProps",id:"runtimeprops",children:[],level:3},{value:"props",id:"props",children:[],level:3},{value:"resolvePackage",id:"resolvepackage",children:[],level:3},{value:"files.*",id:"files",children:[],level:3},{value:"env",id:"env",children:[],level:3}],level:2},{value:"Config Values Overrides",id:"config-values-overrides",children:[],level:2},{value:"Build Flavours",id:"build-flavours",children:[],level:2},{value:"Runtime Props",id:"runtime-props",children:[],level:2}],c={toc:u};function d(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Extremely versatile config system allows you to configure most of your project and environment by simple ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.json")," file changes."),(0,l.kt)("h2",{id:"project-configuration"},"Project Configuration"),(0,l.kt)("p",null,"Your main ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.json")," sits at the root of your project."),(0,l.kt)("p",null,"It is used to define all the major configurations for your particular project shared across all app configurations"),(0,l.kt)("p",null,"Configurations typically stored in your project ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.json")," :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Platform definitions"),(0,l.kt)("li",{parentName:"ul"},"Plugin definitions"),(0,l.kt)("li",{parentName:"ul"},"Engine configurations"),(0,l.kt)("li",{parentName:"ul"},"Defaults"),(0,l.kt)("li",{parentName:"ul"},"Permissions"),(0,l.kt)("li",{parentName:"ul"},"Crypto configuration"),(0,l.kt)("li",{parentName:"ul"},"workspaceID")),(0,l.kt)("h2",{id:"app-configuration"},"App Configuration"),(0,l.kt)("p",null,"Every app configuration flavour contains its own ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," file used to extend overall config with configurations specific to app flavour"),(0,l.kt)("p",null,"Configurations typically stored in your project ",(0,l.kt)("inlineCode",{parentName:"p"},"appConfigs/[APP_ID]/renative.json")," :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"App id, Title, Description etc"),(0,l.kt)("li",{parentName:"ul"},"Active / inactive plugins"),(0,l.kt)("li",{parentName:"ul"},"Plugin overrides per app"),(0,l.kt)("li",{parentName:"ul"},"Build schemes"),(0,l.kt)("li",{parentName:"ul"},"Runtime injections")),(0,l.kt)("h2",{id:"global-configuration"},"Global Configuration"),(0,l.kt)("p",null,"Global ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," are located in your workspace folder and workspace project folders."),(0,l.kt)("p",null,"default workspace location is ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.rnv")," but that can be configured"),(0,l.kt)("p",null,"Because they are global, they will get merged into every build config regardless of the project. However as they get merged as one of the first files they can be easily overridden."),(0,l.kt)("p",null,"Configurations typically stored in your project ",(0,l.kt)("inlineCode",{parentName:"p"},"~/./rnv/renative.json")," :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SDK locations"),(0,l.kt)("li",{parentName:"ul"},"default targets")),(0,l.kt)("h2",{id:"workspace-configuration"},"Workspace Configuration"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"renative.workspaces.json")," is special type because it serves and 1st entry to your ReNative config ecosystem."),(0,l.kt)("p",null,"Typical workspace config will look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n    "workspaces": {\n        "rnv": {\n            "path": "~/.rnv"\n        },\n        "SOME_ANOTHER_WORKSPACE_ID": {\n            "path": "<WORKSPACE_PATH>"\n        }\n    }\n}\n')),(0,l.kt)("p",null,"You can then switch to custom workspace per each project ",(0,l.kt)("inlineCode",{parentName:"p"},"./renative.json")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "workspaceID": "SOME_ANOTHER_WORKSPACE_ID"\n}\n')),(0,l.kt)("h2",{id:"template-configuration"},"Template Configuration"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"renative.template.json")," is special type because it serves as a template file during creation of new project."),(0,l.kt)("h2",{id:"build-configuration"},"Build Configuration"),(0,l.kt)("p",null,"Build config is special type because it is generated every ",(0,l.kt)("inlineCode",{parentName:"p"},"rnv")," job and is unique for each platform and appConfig."),(0,l.kt)("p",null,"It is the result of all ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," merges per each job"),(0,l.kt)("p",null,"Every ",(0,l.kt)("inlineCode",{parentName:"p"},"rnv")," job will generate unique build file in ",(0,l.kt)("inlineCode",{parentName:"p"},"./platformAssets/")," folder."),(0,l.kt)("p",null,"Naming convention of such file is ",(0,l.kt)("inlineCode",{parentName:"p"},"[APP_ID]_[PLATFORM].json")),(0,l.kt)("p",null,"ie command ",(0,l.kt)("inlineCode",{parentName:"p"},"rnv run -p android -c helloworld")," will genreate build file at:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"./platformBuilds/helloworld_android.json")),(0,l.kt)("h2",{id:"local-configuration"},"Local Configuration"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"renative.local.json")," is special type because it's never included in git repository."),(0,l.kt)("p",null,"this allows you to create specific override related to your own local environment without compromising the integrity of your project"),(0,l.kt)("h2",{id:"private-configuration"},"Private Configuration"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"renative.private.json")," is special type because it is meant to store sensitive information."),(0,l.kt)("p",null,"It's never included in git repository directly."),(0,l.kt)("p",null,"It typically resides in your workspace directory and gets encrypted by ",(0,l.kt)("inlineCode",{parentName:"p"},"rnv crypto")," as a means of secure sharing between developers"),(0,l.kt)("p",null,"this allows you to inject sensitive information (deployment keys, keystores, certificates passwords etc) into your project without compromising its security"),(0,l.kt)("h2",{id:"runtime-configuration"},"Runtime Configuration"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"renative.runtime.json")," is special type because it is generated every ",(0,l.kt)("inlineCode",{parentName:"p"},"rnv")," job."),(0,l.kt)("p",null,"Its location is always in ",(0,l.kt)("inlineCode",{parentName:"p"},"./platformAssets/renative.runtime.json")," because it's meant to be accessed by source code."),(0,l.kt)("h3",{id:"injecting-runtime-value"},"Injecting Runtime Value"),(0,l.kt)("p",null,"You can decorate your ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," with runtime value ie:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "runtime": {\n    "foo": "bar"\n  }\n}\n')),(0,l.kt)("p",null,"ie command ",(0,l.kt)("inlineCode",{parentName:"p"},"rnv run -p android -c helloworld")," will generate build file at:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"./platformAssets/renative.runtime.json")),(0,l.kt)("p",null,"with followng value:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "foo": "bar"\n}\n')),(0,l.kt)("h2",{id:"configuration-merges"},"Configuration Merges"),(0,l.kt)("p",null,"ReNative always merges all relevant renative configs into one single build config."),(0,l.kt)("p",null,"Following is the order of merges of various renative configs (if present) producing final ",(0,l.kt)("inlineCode",{parentName:"p"},"platformAssets/renative.json")," config file."),(0,l.kt)("p",null,"\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[RNV_PATH]/projectTemplates/renative.templates.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[RNV_PATH]/pluginTemplates/renative.plugins.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/appConfigs/[APP_ID]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/appConfigs/[APP_ID]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[WORKSPACE_PATH]/[PROJECT_NAME]/appConfigs/[APP_ID]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/renative.local.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/appConfigs/[APP_ID]/renative.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/appConfigs/[APP_ID]/renative.private.json"),(0,l.kt)("br",null),"\n\u2b07\ufe0f\n",(0,l.kt)("inlineCode",{parentName:"p"},"[PROJECT_PATH]/appConfigs/[APP_ID]/renative.local.json"),(0,l.kt)("br",null)),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"dynamic-injectors"},"Dynamic Injectors"),(0,l.kt)("p",null,"You can inject varietry of different dynamic props via ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," configs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"{{INJECTOR}}\n")),(0,l.kt)("h3",{id:"configprops"},"configProps"),(0,l.kt)("p",null,"Any property in ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," can be injected into build file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "common": {\n    "id": "com.example.app"\n  }\n}\n')),(0,l.kt)("p",null,"Inject example of ",(0,l.kt)("inlineCode",{parentName:"p"},"myInject.txt"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Inject app ID here: {{configProps.id}}\n")),(0,l.kt)("h3",{id:"runtimeprops"},"runtimeProps"),(0,l.kt)("p",null,"runtimeProps are special properties generated during each rnv run."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "common": {\n    "timestamp": "{{runtimeProps.timestamp}}"\n  }\n}\n')),(0,l.kt)("p",null,"Currently supported runtime properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"scheme"),(0,l.kt)("li",{parentName:"ul"},"appConfing"),(0,l.kt)("li",{parentName:"ul"},"engine"),(0,l.kt)("li",{parentName:"ul"},"localhost"),(0,l.kt)("li",{parentName:"ul"},"timestamp"),(0,l.kt)("li",{parentName:"ul"},"appDir"),(0,l.kt)("li",{parentName:"ul"},"appId"),(0,l.kt)("li",{parentName:"ul"},"isWrapper"),(0,l.kt)("li",{parentName:"ul"},"missingEnginePlugins"),(0,l.kt)("li",{parentName:"ul"},"targetUDID"),(0,l.kt)("li",{parentName:"ul"},"target"),(0,l.kt)("li",{parentName:"ul"},"shouldOpenBrowser"),(0,l.kt)("li",{parentName:"ul"},"port")),(0,l.kt)("h3",{id:"props"},"props"),(0,l.kt)("p",null,"you can abstract complex ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," plugin configuration via props inject mechanism"),(0,l.kt)("p",null,"Example plugin definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"react-native-fbsdk": {\n    "props": {\n        "APP_ID": "",\n        "APP_NAME": ""\n    },\n    "ios": {\n        "podName": "react-native-fbsdk",\n        "appDelegateImports": [\n            "FBSDKCoreKit"\n        ],\n        "appDelegateMethods": {\n            "application": {\n                "didFinishLaunchingWithOptions": [\n                    "ApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions)"\n                ],\n                "open": [\n                    "ApplicationDelegate.shared.application(app, open: url, options: options)"\n                ]\n            }\n        },\n        "plist": {\n            "FacebookAppID": "{{props.APP_ID}}",\n            "FacebookDisplayName": "{{props.APP_NAME}}",\n            "CFBundleURLTypes": [\n                {\n                    "CFBundleTypeRole": "Editor",\n                    "CFBundleURLSchemes": [\n                        "fb{{props.APP_ID}}"\n                    ]\n                }\n            ],\n            "LSApplicationQueriesSchemes": [\n                "fbapi",\n                "fb-messenger-share-api",\n                "fbauth2",\n                "fbshareextension"\n            ]\n        }\n    }\n}\n')),(0,l.kt)("p",null,"Example usage:"),(0,l.kt)("p",null,"Instead of overriding complex plugin definition you can simply override props"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": {\n    "react-native-fbsdk": {\n      "props": {\n        "APP_ID": "xxxxxxxxx",\n        "APP_NAME": "xxxxxxxxxxxx"\n      }\n    }\n  }\n}\n')),(0,l.kt)("h3",{id:"resolvepackage"},"resolvePackage"),(0,l.kt)("p",null,"resolvePackage allows you to dynamically resolve package location within ",(0,l.kt)("inlineCode",{parentName:"p"},"renative.*.json")," file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "common": {\n     "reactLocation": "{{resolvePackage(\'react\')}}"\n  }\n}\n')),(0,l.kt)("h3",{id:"files"},"files.","*"),(0,l.kt)("p",null,"you can reference values from all standard file references within renative config."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "runtime": {\n     "myId": "{{files.project.config.common.id}}"\n  }\n}\n')),(0,l.kt)("p",null,"Supported file references:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"files.project.package\nfiles.project.config\nfiles.project.configPrivate\nfiles.project.configLocal\nfiles.workspace.config\nfiles.workspace.configPrivate\nfiles.workspace.configLocal\nfiles.workspace.project.config\nfiles.workspace.project.configPrivate\nfiles.workspace.project.configLocal\nfiles.appConfig.config\nfiles.appConfig.configPrivate\nfiles.appConfig.configLocal\n")),(0,l.kt)("h3",{id:"env"},"env"),(0,l.kt)("p",null,"You can inject env variables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "runtime": {\n     "myEnvVariable": "{{env.MY_ENV_VARIABLE}}"\n  }\n}\n')),(0,l.kt)("h2",{id:"config-values-overrides"},"Config Values Overrides"),(0,l.kt)("p",null,"There are 3 levels of override entry objects for your props to fine-tune your app config:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},".common")," //Applies for all platforms + all schemes"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},".platforms.YOUR_PLATFORM")," //Applies specific platforms + all schemes"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},".platforms.YOUR_PLATFORM.buildSchemes.YOUR_SCHEME")," //Applies for specific platform + specific scheme")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "common": {\n    "MY_PROP": "Value1"\n  },\n  "platforms": {\n    "ios": {\n      "MY_PROP": "Value2 overrides Value1",\n      "buildSchemes": {\n        "debug": {\n          "MY_PROP": "Value3 overrides Value 2"\n        }\n      }\n    }\n  }\n}\n')),(0,l.kt)("p",null,"Override Rules for json props:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Strings")," => Replaced"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Numbers")," => Replaced"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Arrays")," => Replaced"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Objects")," => Merged by top level (not deep merge)")),(0,l.kt)("p",null,"Example:\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L4"},"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L4")),(0,l.kt)("p",null,"Will be overridden by:\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L59"},"https://github.com/pavjacko/renative/blob/develop/packages/renative-template-hello-world/appConfigs/helloworld/renative.json#L59")),(0,l.kt)("p",null,"Output config will be decorated with few extra props to help with debugging:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'{\n  "_timestamp": "",\n  "_mergeSources": []\n}\n')),(0,l.kt)("h2",{id:"build-flavours"},"Build Flavours"),(0,l.kt)("p",null,"You can configure different app ID, Title etc. with buildScheme field in you appConfig file."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'"buildSchemes": {\n  "debug": {\n    "id": "renative.helloworld.debug",\n    "runScheme": "Debug",\n    "bundleAssets": false,\n    "bundleIsDev": true\n  },\n  "release": {\n    "id": "renative.helloworld.release",\n    "runScheme": "Release",\n    "bundleAssets": true,\n    "bundleIsDev": false\n  }\n}\n')),(0,l.kt)("p",null,"this will allow you to build 2 separate iOS apps with slightly different configurations:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"$ rnv run -p ios -s debug")," (",(0,l.kt)("inlineCode",{parentName:"p"},"-s debug")," is DEFAULT option so you don't have to add it every time)"),(0,l.kt)("p",null,"and"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"$ rnv run -p ios -s release")),(0,l.kt)("h2",{id:"runtime-props"},"Runtime Props"),(0,l.kt)("p",null,"When you define object with key ",(0,l.kt)("inlineCode",{parentName:"p"},"runtime"),", its properties will be merged into final ",(0,l.kt)("inlineCode",{parentName:"p"},"./platformAssets/renative.runtime.json")," file"),(0,l.kt)("p",null,"you can import above file into your code and get different values depending on your build"))}d.isMDXComponent=!0},3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),s=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||l;return t?i.createElement(f,r(r({ref:n},u),{},{components:t})):i.createElement(f,r({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var s=2;s<l;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);